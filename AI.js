
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Teachable Machine
const URL = "https://teachablemachine.withgoogle.com/models/GAu0Um0vr/";  
let model, labelContainer, maxPredictions;
let isPredicting = false;
let currentFacingMode = 'environment'; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
let videoElement;
let stream;

// ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á DOM Elements
const messageElement = document.getElementById('message');
const startButton = document.getElementById('startButton');
const stopButton = document.getElementById('stopButton');
const switchCameraButton = document.getElementById('switchCameraButton');
const resultDisplayElement = document.getElementById('resultDisplay');
const actionButtonsDiv = document.getElementById('actionButtons');
const infoButtonsDiv = document.getElementById('infoButtons');
const causeButton = document.getElementById('causeButton');
const treatmentButton = document.getElementById('treatmentButton');

// Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
let predictionHistory = [];
const REQUIRED_CONSISTENCY_TIME_MS = 2000; // 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const REQUIRED_PROBABILITY = 0.9; // 90%

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏Å‡∏©‡∏≤
function toggleInfoButtons(show) {
    if (show) {
        infoButtonsDiv.classList.remove('hidden');
        actionButtonsDiv.classList.add('hidden');
    } else {
        infoButtonsDiv.classList.add('hidden');
        actionButtonsDiv.classList.remove('hidden');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å"
async function init() {
    messageElement.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á...';
    messageElement.className = 'message';
    startButton.disabled = true;
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
    toggleInfoButtons(false);
    resultDisplayElement.innerHTML = '';
    predictionHistory = [];

    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    try {
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();
    } catch (error) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•:", error);
        messageElement.textContent = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${error.message}`;
        messageElement.className = 'message error';
        startButton.disabled = false;
        return;
    }

    await setupCamera();

    labelContainer = document.getElementById("label-container");
    labelContainer.innerHTML = '';
    for (let i = 0; i < maxPredictions; i++) {
        labelContainer.appendChild(document.createElement("div"));
    }

    messageElement.textContent = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å!';
    messageElement.className = 'message success';
    startButton.disabled = true;
    stopButton.disabled = false;
    switchCameraButton.disabled = false;
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô getUserMedia
async function setupCamera() {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }

    const constraints = {
        video: {
            width: { ideal: 320 },
            height: { ideal: 240 },
            facingMode: currentFacingMode
        }
    };

    try {
        stream = await navigator.mediaDevices.getUserMedia(constraints);

        videoElement = document.createElement('video');
        videoElement.width = 320;
        videoElement.height = 240;
        videoElement.autoplay = true;
        videoElement.playsInline = true;
        videoElement.muted = true;
        videoElement.srcObject = stream;

        const webcamDiv = document.getElementById("webcam");
        if (!webcamDiv) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö DIV #webcam");

        webcamDiv.innerHTML = '';
        webcamDiv.appendChild(videoElement);

        await new Promise(resolve => {
            videoElement.onloadedmetadata = () => {
                videoElement.play(); // Safari/iOS ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ
                resolve();
            };
            setTimeout(() => {
                console.warn("Timeout ‡∏Ç‡∏ì‡∏∞‡∏£‡∏≠ metadata");
                resolve();
            }, 3000);
        });

        isPredicting = true;
        window.requestAnimationFrame(loop);
    } catch (error) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á:", error);
        let errorMsg = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ';
        if (error.name === 'NotAllowedError') {
            errorMsg = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå';
        } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {
            errorMsg = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì';
        } else if (error.name === 'NotReadableError') {
            errorMsg = '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå';
        }
        messageElement.textContent = errorMsg;
        messageElement.className = 'message error';
        startButton.disabled = false;
        stopButton.disabled = true;
        switchCameraButton.disabled = true;
        isPredicting = false;
        toggleInfoButtons(false);
    }
}

// Loop ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
async function loop() {
    if (!isPredicting) return;
    await predict();
    window.requestAnimationFrame(loop);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
async function predict() {
    if (!videoElement || videoElement.readyState < videoElement.HAVE_ENOUGH_DATA) return;

    const prediction = await model.predict(videoElement);
    prediction.sort((a, b) => b.probability - a.probability);

    let topClassName = '';
    let topProbability = 0;

    for (let i = 0; i < maxPredictions; i++) {
        const classPrediction = prediction[i].className + ": " + (prediction[i].probability * 100).toFixed(1) + "%";
        const predictionDiv = labelContainer.childNodes[i];

        if (i === 0) {
            topClassName = prediction[i].className;
            topProbability = prediction[i].probability;
            const currentTime = Date.now();

            if (topProbability > 0.7) {
                predictionHistory.push({ className: topClassName, probability: topProbability, time: currentTime });
                predictionDiv.className = 'highlight';
            } else {
                predictionHistory = [];
                predictionDiv.className = '';
            }

            predictionHistory = predictionHistory.filter(p => currentTime - p.time <= REQUIRED_CONSISTENCY_TIME_MS);

            let isConsistentAndHighConfidence = true;
            if (predictionHistory.length > 0) {
                for (let p of predictionHistory) {
                    if (p.className !== topClassName || p.probability < REQUIRED_PROBABILITY) {
                        isConsistentAndHighConfidence = false;
                        break;
                    }
                }
                if ((predictionHistory[predictionHistory.length - 1].time - predictionHistory[0].time) < REQUIRED_CONSISTENCY_TIME_MS) {
                    isConsistentAndHighConfidence = false;
                }
            } else {
                isConsistentAndHighConfidence = false;
            }

            if (isConsistentAndHighConfidence) {
                resultDisplayElement.className = 'important-message';
                let showInfoButtons = false;
                let diseaseName = '';

                if (topClassName === "D2") {
                    resultDisplayElement.innerHTML = "<h3>üö® ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß üö®</h3>";
                    diseaseName = "‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß";
                    showInfoButtons = true;
                } else if (topClassName === "D4") {
                    resultDisplayElement.innerHTML = "<h3>üö® ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ üö®</h3>";
                    diseaseName = "‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ";
                    showInfoButtons = true;
                } else if (topClassName === "D3") {
                    resultDisplayElement.innerHTML = "<h3>üö® ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏™‡∏ô‡∏¥‡∏° üö®</h3>";
                    diseaseName = "‡∏™‡∏ô‡∏¥‡∏°";
                    showInfoButtons = true;
                } else if (topClassName === "D1") {
                    resultDisplayElement.innerHTML = "<h3>‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÇ‡∏£‡∏Ñ ‚úÖ</h3>";
                } else if (topClassName === "D5") {
                    resultDisplayElement.innerHTML = "<h3>üö® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà üö®</h3>";
                } else {
                    resultDisplayElement.innerHTML = `<h4>üí° ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô "${topClassName}" ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ!</h4><p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ${(topProbability * 100).toFixed(1)}%</p>`;
                    resultDisplayElement.className = 'info-message';
                }

                stopCamera();
                toggleInfoButtons(showInfoButtons);
            } else {
                resultDisplayElement.className = 'info-message';
                if (predictionHistory.length > 0) {
                    const timeElapsed = predictionHistory[predictionHistory.length - 1].time - predictionHistory[0].time;
                    const remainingTime = Math.ceil((REQUIRED_CONSISTENCY_TIME_MS - timeElapsed) / 1000);
                    resultDisplayElement.innerHTML = `<p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô "${topClassName}"...<br>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ${(topProbability * 100).toFixed(1)}%<br>‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</p>`;
                } else {
                    resultDisplayElement.innerHTML = `<p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å...<br>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á "${topProbability > 0 ? topClassName : '‡∏ö‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á'}": ${(topProbability * 100).toFixed(1)}%<br>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á‡∏û‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</p>`;
                }
                toggleInfoButtons(false);
            }
        }
        predictionDiv.innerHTML = classPrediction;
    }
}

// ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function stopCamera() {
    isPredicting = false;
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }
    if (videoElement) {
        videoElement.srcObject = null;
    }
    const webcamDiv = document.getElementById("webcam");
    if (webcamDiv) {
        webcamDiv.innerHTML = '<p>‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>';
    }
    labelContainer.innerHTML = '';
    messageElement.textContent = '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
    messageElement.className = 'message';
    startButton.disabled = false;
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
    predictionHistory = [];
}

// ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function switchCamera() {
    currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
    isPredicting = false;
    messageElement.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á...';
    messageElement.className = 'message';
    startButton.disabled = true;
    stopButton.disabled = true;
    switchCameraButton.disabled = true;

    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }
    if (videoElement) {
        videoElement.srcObject = null;
        document.getElementById("webcam").innerHTML = '';
    }

    await setupCamera();

    messageElement.textContent = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å!';
    messageElement.className = 'message success';
    startButton.disabled = true;
    stopButton.disabled = false;
    switchCameraButton.disabled = false;
}

// Event Listeners
startButton.addEventListener('click', init);
stopButton.addEventListener('click', stopCamera);
switchCameraButton.addEventListener('click', switchCamera);

// ‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏" ‡πÅ‡∏•‡∏∞ "‡∏£‡∏±‡∏Å‡∏©‡∏≤"
causeButton.addEventListener('click', () => {
    const resultText = resultDisplayElement.querySelector('h3')?.textContent.trim() || '';
    let url = 'bad.html';

    if (resultText.includes('‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß')) {
        url = 'bad2.html';
    } else if (resultText.includes('‡∏™‡∏ô‡∏¥‡∏°')) {
        url = 'bad3.html';
    } else if (resultText.includes('‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ')) {
        url = 'bad4.html';
    }

    const diseaseName = resultText.replace(/[üö®‚úÖ]/g, '').trim();
    window.open(`${url}?disease=${encodeURIComponent(diseaseName)}`, '_blank');
});

treatmentButton.addEventListener('click', () => {
    const resultText = resultDisplayElement.querySelector('h3')?.textContent.trim() || '';
    let url = 'health.html';

    if (resultText.includes('‡∏à‡∏∏‡∏î‡∏£‡∏≤‡∏Ç‡∏≤‡∏ß')) {
        url = 'health2.html';
    } else if (resultText.includes('‡∏™‡∏ô‡∏¥‡∏°')) {
        url = 'health3.html';
    } else if (resultText.includes('‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ')) {
        url = 'health4.html';
    }

    const diseaseName = resultText.replace(/[üö®‚úÖ]/g, '').trim();
    window.open(`${url}?disease=${encodeURIComponent(diseaseName)}`, '_blank');
});

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏" ‡πÅ‡∏•‡∏∞ "‡∏£‡∏±‡∏Å‡∏©‡∏≤"
window.addEventListener('DOMContentLoaded', () => {
    toggleInfoButtons(false);
    stopButton.disabled = true;
    switchCameraButton.disabled = true;
});

// ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
window.addEventListener('beforeunload', () => {
    stopCamera();
});